{"ast":null,"code":"var _jsxFileName = \"/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Modal from 'react-modal';\nimport { Button, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\nconst KanbanBoard = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const addTask = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n  const openModal = task => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n  const handleEditTask = e => {\n    e.preventDefault();\n    if (!currentTask) return;\n    const updatedTasks = tasks.map(task => task.id === currentTaskId ? {\n      ...task,\n      title: currentTask.title,\n      description: currentTask.description\n    } : task);\n    setTasks(updatedTasks);\n    closeModal();\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return; // Exit if dropped outside\n\n    // Copy of tasks to work with\n    const updatedTasks = Array.from(tasks);\n\n    // Remove task from the source index\n    const [movedTask] = updatedTasks.splice(source.index, 1);\n\n    // Update the task's status to the new droppable destination ID\n    movedTask.status = destination.droppableId;\n\n    // Insert task at the new destination index\n    updatedTasks.splice(destination.index, 0, movedTask);\n\n    // Update the state with reordered tasks\n    setTasks(updatedTasks);\n  };\n  const handleDeleteTask = taskId => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          width: '100%',\n          height: '100%'\n        },\n        children: ['TODO', 'DOING', 'DONE'].map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            style: {\n              width: '30%',\n              padding: '10px',\n              height: '100%',\n              overflowY: 'auto',\n              // Allow scrolling within each column\n              backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n              borderRadius: '5px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: {\n                  ...provided.draggableProps.style,\n                  margin: '5px 0'\n                },\n                children: /*#__PURE__*/_jsxDEV(Task, {\n                  task: task,\n                  index: index,\n                  onClick: () => openModal(task),\n                  onDelete: () => handleDeleteTask(task.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 27\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 23\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Edit Task\",\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), currentTask && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEditTask,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          placeholder: \"Edit Title\",\n          value: currentTask.title,\n          onChange: e => setCurrentTask({\n            ...currentTask,\n            title: e.target.value\n          }),\n          required: true,\n          sx: {\n            marginBottom: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          placeholder: \"Edit Description\",\n          value: currentTask.description,\n          onChange: e => setCurrentTask({\n            ...currentTask,\n            description: e.target.value\n          }),\n          required: true,\n          sx: {\n            marginBottom: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            variant: \"contained\",\n            onClick: closeModal,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"vjLL+BR4/pK035lK2w8PxxJuNDU=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\n{/* Modal for editing tasks */}\n{/* <Modal\n  isOpen={modalIsOpen}\n  onRequestClose={closeModal}\n  contentLabel=\"Edit Task\"\n  style={{\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n    },\n  }}\n >\n  <h2>Edit Task</h2>\n  {currentTask && (\n    <form onSubmit={handleEditTask}>\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={currentTask.title}\n        onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n        required\n      />\n      <textarea\n        placeholder=\"Description\"\n        value={currentTask.description}\n        onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n        required\n      />\n      <button type=\"submit\">Save Changes</button>\n      <button type=\"button\" onClick={closeModal}>Cancel</button>\n    </form>\n  )}\n </Modal> */}\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","Task","TaskForm","DragDropContext","Droppable","Draggable","Modal","Button","TextField","jsxDEV","_jsxDEV","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","KanbanBoard","_s","tasks","setTasks","modalIsOpen","setModalIsOpen","currentTaskId","setCurrentTaskId","currentTask","setCurrentTask","addTask","newTask","openModal","task","id","closeModal","handleEditTask","e","preventDefault","updatedTasks","map","title","description","onDragEnd","result","source","destination","Array","from","movedTask","splice","index","status","droppableId","handleDeleteTask","taskId","filter","style","height","overflow","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","width","provided","ref","innerRef","droppableProps","padding","overflowY","backgroundColor","borderRadius","draggableId","draggableProps","dragHandleProps","margin","onClick","onDelete","placeholder","isOpen","onRequestClose","contentLabel","onSubmit","fullWidth","value","onChange","target","required","sx","marginBottom","type","variant","_c","$RefreshReg$"],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx"],"sourcesContent":["// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport Modal from 'react-modal';\nimport { Task as TaskType } from '../types';\nimport { Button, TextField } from '@mui/material';\n\nModal.setAppElement('#root');\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst KanbanBoard: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskType[]>([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n  const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n  const addTask = (newTask: TaskType) => {\n    setTasks([...tasks, newTask]);\n  };\n\n  const openModal = (task: TaskType) => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n\n  const handleEditTask = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!currentTask) return;\n\n    const updatedTasks = tasks.map(task =>\n      task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n    );\n    setTasks(updatedTasks);\n    closeModal();\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n    if (!destination) return; // Exit if dropped outside\n\n    // Copy of tasks to work with\n    const updatedTasks = Array.from(tasks);\n\n    // Remove task from the source index\n    const [movedTask] = updatedTasks.splice(source.index, 1);\n\n    // Update the task's status to the new droppable destination ID\n    movedTask.status = destination.droppableId as 'TODO' | 'DOING' | 'DONE';\n\n    // Insert task at the new destination index\n    updatedTasks.splice(destination.index, 0, movedTask);\n\n    // Update the state with reordered tasks\n    setTasks(updatedTasks);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n\n  return (\n    <div style={{ height: '100vh', overflow: 'hidden' }}>\n      <TaskForm addTask={addTask} />\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', height: '100%' }}>\n          {['TODO', 'DOING', 'DONE'].map((status) => (\n            <Droppable key={status} droppableId={status}>\n              {(provided) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  style={{\n                    width: '30%',\n                    padding: '10px',\n                    height: '100%',\n                    overflowY: 'auto', // Allow scrolling within each column\n                    backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n                    borderRadius: '5px',\n                  }}\n                >\n                  <h2>{status}</h2>\n                  {tasks\n                    .filter(task => task.status === status)\n                    .map((task, index) => (\n                      <Draggable key={task.id} draggableId={task.id} index={index}>\n                        {(provided) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={{\n                              ...provided.draggableProps.style,\n                              margin: '5px 0',\n                            }}\n                          >\n                            <Task\n                              task={task}\n                              index={index}\n                              onClick={() => openModal(task)}\n                              onDelete={() => handleDeleteTask(task.id)}\n                            />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </div>\n      </DragDropContext>\n\n      <Modal isOpen={modalIsOpen} onRequestClose={closeModal} contentLabel=\"Edit Task\" style={customStyles}>\n        <h2>Edit Card</h2>\n        {currentTask && (\n          <form onSubmit={handleEditTask}>\n            <TextField\n              fullWidth\n              placeholder=\"Edit Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n              sx={{ marginBottom: '10px' }}\n            />\n            <TextField\n              fullWidth\n              placeholder=\"Edit Description\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n              sx={{ marginBottom: '10px' }}\n            />\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n                Close\n              </Button>\n              <Button type=\"submit\" variant=\"contained\">\n                Submit\n              </Button>\n            </div>\n          </form>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default KanbanBoard;\n\n\n\n\n\n\n\n\n\n      {/* Modal for editing tasks */}\n      {/* <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Edit Task\"\n        style={{\n          content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)',\n          },\n        }}\n      >\n        <h2>Edit Task</h2>\n        {currentTask && (\n          <form onSubmit={handleEditTask}>\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n            />\n            <textarea\n              placeholder=\"Description\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n            />\n            <button type=\"submit\">Save Changes</button>\n            <button type=\"button\" onClick={closeModal}>Cancel</button>\n          </form>\n        )}\n      </Modal> */}\n\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}