{"ast":null,"code":"var _jsxFileName = \"/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Modal from 'react-modal';\nimport { Button, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\nconst KanbanBoard = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const addTask = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n  const openModal = task => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n  const handleEditTask = e => {\n    e.preventDefault();\n    if (!currentTask) return;\n    const updatedTasks = tasks.map(task => task.id === currentTaskId ? {\n      ...task,\n      title: currentTask.title,\n      description: currentTask.description\n    } : task);\n    setTasks(updatedTasks);\n    closeModal();\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    // If no destination, the item was dropped outside any droppable area\n    if (!destination) return;\n\n    // If the source and destination are the same, no need to update state\n    if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n\n    // Create a copy of the current tasks state\n    const updatedTasks = Array.from(tasks);\n\n    // Remove the task from the source index\n    const [movedTask] = updatedTasks.splice(source.index, 1);\n\n    // Update the task's status to match the new column (droppable ID)\n    movedTask.status = destination.droppableId;\n\n    // Insert the task at the new destination index\n    updatedTasks.splice(destination.index, 0, movedTask);\n\n    // Update the state with the modified tasks\n    setTasks(updatedTasks);\n  };\n\n  // Function to delete a task by its ID\n  const handleDeleteTask = taskId => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      overflowY: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          width: '95%',\n          height: \"100%\"\n        },\n        children: ['TODO', 'DOING', 'DONE'].map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            style: {\n              width: '30%',\n              padding: '10px',\n              height: \"100%\",\n              background: 'beige',\n              overflowY: 'auto' // Allow scrolling only within this area\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n              task: task,\n              index: index,\n              onClick: () => openModal(task),\n              onDelete: () => handleDeleteTask(task.id)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 45\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Edit Task\",\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), currentTask && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditTask,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            id: \"fullWidth\",\n            placeholder: \"Edit Title\",\n            value: currentTask.title,\n            onChange: e => setCurrentTask({\n              ...currentTask,\n              title: e.target.value\n            }),\n            required: true,\n            sx: {\n              marginBottom: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            id: \"fullWidth\",\n            value: currentTask.description,\n            onChange: e => setCurrentTask({\n              ...currentTask,\n              description: e.target.value\n            }),\n            required: true,\n            placeholder: \"Edit Description\",\n            sx: {\n              marginBottom: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              justifyContent: \"space-between\",\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"contained\",\n              onClick: closeModal,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"vjLL+BR4/pK035lK2w8PxxJuNDU=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import Modal from 'react-modal';\n// import { Task as TaskType } from '../types';\n// import { Button, TextField } from '@mui/material';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const customStyles = {\n//     content: {\n//       top: \"50%\",\n//       left: \"50%\",\n//       right: \"auto\",\n//       bottom: \"auto\",\n//       marginRight: \"-50%\",\n//       transform: \"translate(-50%, -50%)\",\n//     },\n//   };\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const addTask = (newTask: TaskType) => {\n//     setTasks([...tasks, newTask]);\n//   };\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     setTasks(updatedTasks);\n//   };\n\n//    // Function to delete a task by its ID\n//    const handleDeleteTask = (taskId: string) => {\n//     setTasks(tasks.filter(task => task.id !== taskId));\n//   };\n\n//   return (\n//     <div>\n//       {/* <h1>Kanban TODO App</h1> */}\n//       <TaskForm addTask={addTask} />\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%', height:\"100%\"}}>\n//           {['TODO', 'DOING', 'DONE'].map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     height: \"100%\",\n//                     background : 'beige',\n//                     // border: '1px solid black',\n//                     // backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n//                   {tasks\n//                     .filter(task => task.status === status)\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)}  onDelete={() => handleDeleteTask(task.id)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//       <Modal\n//        isOpen={modalIsOpen}\n//        onRequestClose={closeModal}\n//        contentLabel=\"Edit Task\"\n//         style={customStyles}\n//       >\n//         <h2>Edit Card</h2>\n//         {currentTask && (\n//         <div>\n//           <form onSubmit={handleEditTask}>\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               placeholder=\"Edit Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//               placeholder=\"Edit Description\"\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\n//               <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n//                 Close\n//               </Button>\n//               <Button type=\"submit\" variant=\"contained\">\n//                 Submit\n//               </Button>\n//             </div>\n//           </form>\n//         </div>\n//          )}\n//       </Modal> \n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n\n{/* Modal for editing tasks */}\n{/* <Modal\n  isOpen={modalIsOpen}\n  onRequestClose={closeModal}\n  contentLabel=\"Edit Task\"\n  style={{\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n    },\n  }}\n >\n  <h2>Edit Task</h2>\n  {currentTask && (\n    <form onSubmit={handleEditTask}>\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={currentTask.title}\n        onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n        required\n      />\n      <textarea\n        placeholder=\"Description\"\n        value={currentTask.description}\n        onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n        required\n      />\n      <button type=\"submit\">Save Changes</button>\n      <button type=\"button\" onClick={closeModal}>Cancel</button>\n    </form>\n  )}\n </Modal> */}\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","Task","TaskForm","DragDropContext","Droppable","Modal","Button","TextField","jsxDEV","_jsxDEV","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","KanbanBoard","_s","tasks","setTasks","modalIsOpen","setModalIsOpen","currentTaskId","setCurrentTaskId","currentTask","setCurrentTask","addTask","newTask","openModal","task","id","closeModal","handleEditTask","e","preventDefault","updatedTasks","map","title","description","onDragEnd","result","source","destination","droppableId","index","Array","from","movedTask","splice","status","handleDeleteTask","taskId","filter","style","height","overflowY","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","width","provided","ref","innerRef","droppableProps","padding","background","onClick","onDelete","placeholder","isOpen","onRequestClose","contentLabel","onSubmit","fullWidth","value","onChange","target","required","sx","marginBottom","type","variant","_c","$RefreshReg$"],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx"],"sourcesContent":["// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport Modal from 'react-modal';\nimport { Task as TaskType } from '../types';\nimport { Button, TextField } from '@mui/material';\n\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst customStyles = {\n    content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n};\n\nconst KanbanBoard: React.FC = () => {\n    const [tasks, setTasks] = useState<TaskType[]>([]);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n    const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n    const addTask = (newTask: TaskType) => {\n        setTasks([...tasks, newTask]);\n    };\n\n    const openModal = (task: TaskType) => {\n        setCurrentTask(task);\n        setCurrentTaskId(task.id);\n        setModalIsOpen(true);\n    };\n\n    const closeModal = () => {\n        setModalIsOpen(false);\n        setCurrentTaskId(null);\n        setCurrentTask(null);\n    };\n\n    const handleEditTask = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!currentTask) return;\n\n        const updatedTasks = tasks.map(task =>\n            task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n        );\n        setTasks(updatedTasks);\n        closeModal();\n    };\n\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // If no destination, the item was dropped outside any droppable area\n        if (!destination) return;\n\n        // If the source and destination are the same, no need to update state\n        if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n\n        // Create a copy of the current tasks state\n        const updatedTasks = Array.from(tasks);\n\n        // Remove the task from the source index\n        const [movedTask] = updatedTasks.splice(source.index, 1);\n\n        // Update the task's status to match the new column (droppable ID)\n        movedTask.status = destination.droppableId as 'TODO' | 'DOING' | 'DONE';\n\n        // Insert the task at the new destination index\n        updatedTasks.splice(destination.index, 0, movedTask);\n\n        // Update the state with the modified tasks\n        setTasks(updatedTasks);\n    };\n\n    // Function to delete a task by its ID\n    const handleDeleteTask = (taskId: string) => {\n        setTasks(tasks.filter(task => task.id !== taskId));\n    };\n\n    return (\n        <div style={{ height: '100vh', overflowY: 'hidden' }}>\n            <TaskForm addTask={addTask} />\n\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%', height: \"100%\" }}>\n                    {['TODO', 'DOING', 'DONE'].map((status) => (\n                        <Droppable key={status} droppableId={status}>\n                            {(provided) => (\n                                <div\n                                    ref={provided.innerRef}\n                                    {...provided.droppableProps}\n                                    style={{\n                                        width: '30%',\n                                        padding: '10px',\n                                        height: \"100%\",\n                                        background: 'beige',\n                                        overflowY: 'auto', // Allow scrolling only within this area\n                                    }}\n                                >\n                                    <h2>{status}</h2>\n                                    {tasks\n                                        .filter(task => task.status === status)\n                                        .map((task, index) => (\n                                            <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} onDelete={() => handleDeleteTask(task.id)} />\n                                        ))}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n                        </Droppable>\n                    ))}\n                </div>\n            </DragDropContext>\n\n            <Modal\n                isOpen={modalIsOpen}\n                onRequestClose={closeModal}\n                contentLabel=\"Edit Task\"\n                style={customStyles}\n            >\n                <h2>Edit Card</h2>\n                {currentTask && (\n                    <div>\n                        <form onSubmit={handleEditTask}>\n                            <TextField\n                                fullWidth\n                                id=\"fullWidth\"\n                                placeholder=\"Edit Title\"\n                                value={currentTask.title}\n                                onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n                                required\n                                sx={{ marginBottom: \"10px\" }}\n                            />\n                            <TextField\n                                fullWidth\n                                id=\"fullWidth\"\n                                value={currentTask.description}\n                                onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n                                required\n                                placeholder=\"Edit Description\"\n                                sx={{ marginBottom: \"10px\" }}\n                            />\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\n                                <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n                                    Close\n                                </Button>\n                                <Button type=\"submit\" variant=\"contained\">\n                                    Submit\n                                </Button>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </Modal>\n        </div>\n    );\n};\n\nexport default KanbanBoard;\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import Modal from 'react-modal';\n// import { Task as TaskType } from '../types';\n// import { Button, TextField } from '@mui/material';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n\n// const customStyles = {\n//     content: {\n//       top: \"50%\",\n//       left: \"50%\",\n//       right: \"auto\",\n//       bottom: \"auto\",\n//       marginRight: \"-50%\",\n//       transform: \"translate(-50%, -50%)\",\n//     },\n//   };\n\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const addTask = (newTask: TaskType) => {\n//     setTasks([...tasks, newTask]);\n//   };\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n    \n//     setTasks(updatedTasks);\n//   };\n\n//    // Function to delete a task by its ID\n//    const handleDeleteTask = (taskId: string) => {\n//     setTasks(tasks.filter(task => task.id !== taskId));\n//   };\n\n\n//   return (\n//     <div>\n//       {/* <h1>Kanban TODO App</h1> */}\n//       <TaskForm addTask={addTask} />\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%', height:\"100%\"}}>\n//           {['TODO', 'DOING', 'DONE'].map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     height: \"100%\",\n//                     background : 'beige',\n//                     // border: '1px solid black',\n//                     // backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n//                   {tasks\n//                     .filter(task => task.status === status)\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)}  onDelete={() => handleDeleteTask(task.id)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//       <Modal\n//        isOpen={modalIsOpen}\n//        onRequestClose={closeModal}\n//        contentLabel=\"Edit Task\"\n//         style={customStyles}\n//       >\n//         <h2>Edit Card</h2>\n//         {currentTask && (\n//         <div>\n//           <form onSubmit={handleEditTask}>\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               placeholder=\"Edit Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//               placeholder=\"Edit Description\"\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\n//               <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n//                 Close\n//               </Button>\n//               <Button type=\"submit\" variant=\"contained\">\n//                 Submit\n//               </Button>\n//             </div>\n//           </form>\n//         </div>\n//          )}\n//       </Modal> \n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n\n\n\n\n\n\n\n\n      {/* Modal for editing tasks */}\n      {/* <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Edit Task\"\n        style={{\n          content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)',\n          },\n        }}\n      >\n        <h2>Edit Task</h2>\n        {currentTask && (\n          <form onSubmit={handleEditTask}>\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n            />\n            <textarea\n              placeholder=\"Description\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n            />\n            <button type=\"submit\">Save Changes</button>\n            <button type=\"button\" onClick={closeModal}>Cancel</button>\n          </form>\n        )}\n      </Modal> */}\n\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n"],"mappings":"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H,MAAM;cAACiF,IAAI,EAAC,QAAQ;cAACC,OAAO,EAAC,WAAW;cAACf,OAAO,EAAEvC,UAAW;cAAAyB,QAAA,EAAC;YAE/D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTtD,OAAA,CAACH,MAAM;cAACiF,IAAI,EAAC,QAAQ;cAACC,OAAO,EAAC,WAAW;cAAA7B,QAAA,EAAC;YAE1C;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAAC3C,EAAA,CA3IID,WAAqB;AAAAsE,EAAA,GAArBtE,WAAqB;AA6I3B,eAAeA,WAAW;;AAoB1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASM,CAAC;AACD,CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAlCO;;AAqsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}