{"ast":null,"code":"var _jsxFileName = \"/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from './Task';\nimport Modal from 'react-modal';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport TaskForm from './TaskForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst KanbanBoard = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const openModal = task => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n  const handleEditTask = e => {\n    e.preventDefault();\n    if (!currentTask) return;\n    const updatedTasks = tasks.map(task => task.id === currentTaskId ? {\n      ...task,\n      title: currentTask.title,\n      description: currentTask.description\n    } : task);\n    setTasks(updatedTasks);\n    closeModal();\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const updatedTasks = Array.from(tasks);\n    const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n    // Update the status of the moved task based on the droppableId\n    movedTask.status = result.destination.droppableId; // Ensure the type is correct\n    updatedTasks.splice(result.destination.index, 0, movedTask);\n    setTasks(updatedTasks);\n  };\n  const addTask = (title, description, status) => {\n    const newTask = {\n      id: Math.random().toString(36).substr(2, 9),\n      // Generate a random id\n      title,\n      description,\n      status // Set the status from the argument\n    };\n    setTasks([...tasks, newTask]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kanban TODO App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: ['TODO', 'DOING', 'DONE'].map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            style: {\n              width: '30%',\n              padding: '10px',\n              border: '1px solid black',\n              backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n              addTask: addTask,\n              status: status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n              task: task,\n              index: index,\n              onClick: () => openModal(task)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 23\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Edit Task\",\n      style: {\n        content: {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          transform: 'translate(-50%, -50%)'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), currentTask && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEditTask,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Title\",\n          value: currentTask.title,\n          onChange: e => setCurrentTask({\n            ...currentTask,\n            title: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Description\",\n          value: currentTask.description,\n          onChange: e => setCurrentTask({\n            ...currentTask,\n            description: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: closeModal,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"vjLL+BR4/pK035lK2w8PxxJuNDU=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","Task","Modal","DragDropContext","Droppable","TaskForm","jsxDEV","_jsxDEV","setAppElement","KanbanBoard","_s","tasks","setTasks","modalIsOpen","setModalIsOpen","currentTaskId","setCurrentTaskId","currentTask","setCurrentTask","openModal","task","id","closeModal","handleEditTask","e","preventDefault","updatedTasks","map","title","description","onDragEnd","result","destination","Array","from","movedTask","splice","source","index","status","droppableId","addTask","newTask","Math","random","toString","substr","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","provided","ref","innerRef","droppableProps","width","padding","border","backgroundColor","filter","onClick","placeholder","isOpen","onRequestClose","contentLabel","content","top","left","right","bottom","transform","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx"],"sourcesContent":["// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from './Task';\nimport Modal from 'react-modal';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Task as TaskType } from '../types';\nimport TaskForm from './TaskForm';\n\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst KanbanBoard: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskType[]>([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n  const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n  const openModal = (task: TaskType) => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n\n  const handleEditTask = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!currentTask) return;\n\n    const updatedTasks = tasks.map(task =>\n      task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n    );\n    setTasks(updatedTasks);\n    closeModal();\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const updatedTasks = Array.from(tasks);\n    const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n    // Update the status of the moved task based on the droppableId\n    movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n    updatedTasks.splice(result.destination.index, 0, movedTask);\n    \n    setTasks(updatedTasks);\n  };\n\n  const addTask = (title: string, description: string, status: 'TODO' | 'DOING' | 'DONE') => {\n    const newTask: TaskType = {\n      id: Math.random().toString(36).substr(2, 9), // Generate a random id\n      title,\n      description,\n      status, // Set the status from the argument\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  return (\n    <div>\n      <h1>Kanban TODO App</h1>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {['TODO', 'DOING', 'DONE'].map((status) => (\n            <Droppable key={status} droppableId={status}>\n              {(provided) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  style={{\n                    width: '30%',\n                    padding: '10px',\n                    border: '1px solid black',\n                    backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n                  }}\n                >\n                  <h2>{status}</h2>\n\n                  {/* TaskForm inside the column */}\n                  <TaskForm addTask={addTask} status={status} />\n\n                  {tasks\n                    .filter(task => task.status === status)\n                    .map((task, index) => (\n                      <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n                    ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </div>\n      </DragDropContext>\n\n      {/* Modal for editing tasks */}\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Edit Task\"\n        style={{\n          content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)',\n          },\n        }}\n      >\n        <h2>Edit Task</h2>\n        {currentTask && (\n          <form onSubmit={handleEditTask}>\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n            />\n            <textarea\n              placeholder=\"Description\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n            />\n            <button type=\"submit\">Save Changes</button>\n            <button type=\"button\" onClick={closeModal}>Cancel</button>\n          </form>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default KanbanBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}