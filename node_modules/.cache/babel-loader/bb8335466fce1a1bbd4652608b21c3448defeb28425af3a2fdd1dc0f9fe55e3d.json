{"ast":null,"code":"var _jsxFileName = \"/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Modal from 'react-modal';\nimport { Box, Button, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\nconst KanbanBoard = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const addTask = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n  const openModal = task => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n  const handleEditTask = e => {\n    e.preventDefault();\n    if (!currentTask) return;\n    const updatedTasks = tasks.map(task => task.id === currentTaskId ? {\n      ...task,\n      title: currentTask.title,\n      description: currentTask.description\n    } : task);\n    setTasks(updatedTasks);\n    closeModal();\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const updatedTasks = Array.from(tasks);\n    const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n    // Update the status of the moved task based on the droppableId\n    movedTask.status = result.destination.droppableId; // Ensure the type is correct\n    updatedTasks.splice(result.destination.index, 0, movedTask);\n    setTasks(updatedTasks);\n  };\n\n  // Function to delete a task by its ID\n  const handleDeleteTask = taskId => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      // Full height of viewport\n      overflow: 'hidden',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          width: '95%',\n          height: 'calc(100% - 80px)',\n          // Leaves space for TaskForm\n          overflow: 'hidden',\n          padding: '10px'\n        },\n        children: ['TODO', 'DOING', 'DONE'].map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            style: {\n              width: '30%',\n              padding: '10px',\n              height: \"100%\",\n              background: 'beige'\n              // border: '1px solid black',\n              // backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n              task: task,\n              index: index,\n              onClick: () => openModal(task),\n              onDelete: () => handleDeleteTask(task.id)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 23\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Edit Task\",\n      style: customStyles,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), currentTask && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditTask,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            id: \"fullWidth\",\n            placeholder: \"Edit Title\",\n            value: currentTask.title,\n            onChange: e => setCurrentTask({\n              ...currentTask,\n              title: e.target.value\n            }),\n            required: true,\n            sx: {\n              marginBottom: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            id: \"fullWidth\",\n            value: currentTask.description,\n            onChange: e => setCurrentTask({\n              ...currentTask,\n              description: e.target.value\n            }),\n            required: true,\n            placeholder: \"Edit Description\",\n            sx: {\n              marginBottom: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              justifyContent: \"space-between\",\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"contained\",\n              onClick: closeModal,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"vjLL+BR4/pK035lK2w8PxxJuNDU=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","Task","TaskForm","DragDropContext","Droppable","Modal","Box","Button","TextField","jsxDEV","_jsxDEV","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","KanbanBoard","_s","tasks","setTasks","modalIsOpen","setModalIsOpen","currentTaskId","setCurrentTaskId","currentTask","setCurrentTask","addTask","newTask","openModal","task","id","closeModal","handleEditTask","e","preventDefault","updatedTasks","map","title","description","onDragEnd","result","destination","Array","from","movedTask","splice","source","index","status","droppableId","handleDeleteTask","taskId","filter","sx","height","overflow","display","flexDirection","children","fileName","_jsxFileName","lineNumber","columnNumber","style","justifyContent","width","padding","provided","ref","innerRef","droppableProps","background","onClick","onDelete","placeholder","isOpen","onRequestClose","contentLabel","onSubmit","fullWidth","value","onChange","target","required","marginBottom","type","variant","_c","$RefreshReg$"],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx"],"sourcesContent":["// src/components/KanbanBoard.tsx\n\nimport React, { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Modal from 'react-modal';\nimport { Task as TaskType } from '../types';\nimport { Box, Button, TextField } from '@mui/material';\n\nModal.setAppElement('#root'); // Set the app element for accessibility\n\n\nconst customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n\n\nconst KanbanBoard: React.FC = () => {\n  const [tasks, setTasks] = useState<TaskType[]>([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n  const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n  const addTask = (newTask: TaskType) => {\n    setTasks([...tasks, newTask]);\n  };\n\n  const openModal = (task: TaskType) => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n\n  const handleEditTask = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!currentTask) return;\n\n    const updatedTasks = tasks.map(task =>\n      task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n    );\n    setTasks(updatedTasks);\n    closeModal();\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const updatedTasks = Array.from(tasks);\n    const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n    // Update the status of the moved task based on the droppableId\n    movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n    updatedTasks.splice(result.destination.index, 0, movedTask);\n    \n    setTasks(updatedTasks);\n  };\n\n   // Function to delete a task by its ID\n   const handleDeleteTask = (taskId: string) => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n\n\n  return (\n    <Box   sx={{\n        height: '100vh',  // Full height of viewport\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n      }}>\n      {/* <h1>Kanban TODO App</h1> */}\n      <TaskForm addTask={addTask} />\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%' ,   height: 'calc(100% - 80px)', // Leaves space for TaskForm\n            overflow: 'hidden',\n            padding: '10px',}}>\n          {['TODO', 'DOING', 'DONE'].map((status) => (\n            <Droppable key={status} droppableId={status}>\n              {(provided) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  style={{\n                    width: '30%',\n                    padding: '10px',\n                    height: \"100%\",\n                    background : 'beige',\n                    // border: '1px solid black',\n                    // backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n                  }}\n                >\n                  <h2>{status}</h2>\n                  {tasks\n                    .filter(task => task.status === status)\n                    .map((task, index) => (\n                      <Task key={task.id} task={task} index={index} onClick={() => openModal(task)}  onDelete={() => handleDeleteTask(task.id)} />\n                    ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </div>\n      </DragDropContext>\n\n      {/* Modal for editing tasks */}\n      {/* <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Edit Task\"\n        style={{\n          content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)',\n          },\n        }}\n      >\n        <h2>Edit Task</h2>\n        {currentTask && (\n          <form onSubmit={handleEditTask}>\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n            />\n            <textarea\n              placeholder=\"Description\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n            />\n            <button type=\"submit\">Save Changes</button>\n            <button type=\"button\" onClick={closeModal}>Cancel</button>\n          </form>\n        )}\n      </Modal> */}\n\n\n\n\n      <Modal\n       isOpen={modalIsOpen}\n       onRequestClose={closeModal}\n       contentLabel=\"Edit Task\"\n        style={customStyles}\n      >\n        <h2>Edit Card</h2>\n        {currentTask && (\n        <div>\n          <form onSubmit={handleEditTask}>\n            <TextField\n              fullWidth\n              id=\"fullWidth\"\n              placeholder=\"Edit Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n              sx={{ marginBottom: \"10px\" }}\n            />\n            <TextField\n              fullWidth\n              id=\"fullWidth\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n              placeholder=\"Edit Description\"\n              sx={{ marginBottom: \"10px\" }}\n            />\n            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\n              <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n                Close\n              </Button>\n              <Button type=\"submit\" variant=\"contained\">\n                Submit\n              </Button>\n            </div>\n          </form>\n        </div>\n         )}\n      </Modal> \n    </Box>\n  );\n};\n\nexport default KanbanBoard;\n\n\n\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}