{"ast":null,"code":"var _jsxFileName = \"/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndProvider, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport Modal from 'react-modal';\nimport { Button, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst KanbanBoard = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const addTask = newTask => {\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n  const openModal = task => {\n    setCurrentTask(task);\n    setCurrentTaskId(task.id);\n    setModalIsOpen(true);\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentTaskId(null);\n    setCurrentTask(null);\n  };\n  const handleEditTask = e => {\n    e.preventDefault();\n    if (!currentTask) return;\n    const updatedTasks = tasks.map(task => task.id === currentTaskId ? {\n      ...task,\n      title: currentTask.title,\n      description: currentTask.description\n    } : task);\n    setTasks(updatedTasks);\n    closeModal();\n  };\n  const moveTask = (id, status) => {\n    setTasks(prevTasks => prevTasks.map(task => task.id === id ? {\n      ...task,\n      status\n    } : task));\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '95%',\n        height: '100vh'\n      },\n      children: ['TODO', 'DOING', 'DONE'].map(status => /*#__PURE__*/_jsxDEV(Column, {\n        status: status // Cast status to the correct type\n        ,\n        tasks: tasks.filter(task => task.status === status),\n        moveTask: moveTask\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Edit Task\",\n      style: {\n        content: {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), currentTask && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEditTask,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          placeholder: \"Edit Title\",\n          value: currentTask.title,\n          onChange: e => setCurrentTask({\n            ...currentTask,\n            title: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          placeholder: \"Edit Description\",\n          value: currentTask.description,\n          onChange: e => setCurrentTask({\n            ...currentTask,\n            description: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            justifyContent: 'space-between',\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            variant: \"contained\",\n            onClick: closeModal,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n// interface ColumnProps {\n//     status: 'TODO' | 'DOING' | 'DONE'; // Specify the status as a literal type\n//     tasks: TaskType[];\n//     moveTask: (id: string, status: 'TODO' | 'DOING' | 'DONE') => void;\n// }\n\n// const Column: React.FC<ColumnProps> = ({ status, tasks, moveTask }) => {\n//     const [, drop] = useDrop({\n//         accept: 'TASK',\n//         drop: (item: { id: string }) => moveTask(item.id, status), // This now works because status is typed correctly\n//     });\n\n// Adjust the Column component to receive delete and openModal props\n_s(KanbanBoard, \"vjLL+BR4/pK035lK2w8PxxJuNDU=\");\n_c = KanbanBoard;\nconst Column = ({\n  status,\n  tasks,\n  moveTask,\n  deleteTask,\n  openModal\n}) => {\n  _s2();\n  const [, drop] = useDrop({\n    accept: 'TASK',\n    drop: item => moveTask(item.id, status)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: {\n      width: '30%',\n      padding: '10px',\n      backgroundColor: 'lightgrey',\n      height: '100%',\n      overflowY: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      task: task,\n      onClick: () => {},\n      onDelete: () => {}\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s2(Column, \"hdmCamxlwL9WeSdzgzIVyaE48AI=\", false, function () {\n  return [useDrop];\n});\n_c2 = Column;\nexport default KanbanBoard;\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import Modal from 'react-modal';\n// import { Task as TaskType } from '../types';\n// import { Button, TextField } from '@mui/material';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const customStyles = {\n//     content: {\n//       top: \"50%\",\n//       left: \"50%\",\n//       right: \"auto\",\n//       bottom: \"auto\",\n//       marginRight: \"-50%\",\n//       transform: \"translate(-50%, -50%)\",\n//     },\n//   };\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const addTask = (newTask: TaskType) => {\n//     setTasks([...tasks, newTask]);\n//   };\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     setTasks(updatedTasks);\n//   };\n\n//    // Function to delete a task by its ID\n//    const handleDeleteTask = (taskId: string) => {\n//     setTasks(tasks.filter(task => task.id !== taskId));\n//   };\n\n//   return (\n//     <div>\n//       {/* <h1>Kanban TODO App</h1> */}\n//       <TaskForm addTask={addTask} />\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%', height:\"100%\"}}>\n//           {['TODO', 'DOING', 'DONE'].map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     height: \"100%\",\n//                     background : 'beige',\n//                     // border: '1px solid black',\n//                     // backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n//                   {tasks\n//                     .filter(task => task.status === status)\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)}  onDelete={() => handleDeleteTask(task.id)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//       <Modal\n//        isOpen={modalIsOpen}\n//        onRequestClose={closeModal}\n//        contentLabel=\"Edit Task\"\n//         style={customStyles}\n//       >\n//         <h2>Edit Card</h2>\n//         {currentTask && (\n//         <div>\n//           <form onSubmit={handleEditTask}>\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               placeholder=\"Edit Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//               placeholder=\"Edit Description\"\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\n//               <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n//                 Close\n//               </Button>\n//               <Button type=\"submit\" variant=\"contained\">\n//                 Submit\n//               </Button>\n//             </div>\n//           </form>\n//         </div>\n//          )}\n//       </Modal> \n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n\n{/* Modal for editing tasks */}\n{/* <Modal\n  isOpen={modalIsOpen}\n  onRequestClose={closeModal}\n  contentLabel=\"Edit Task\"\n  style={{\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n    },\n  }}\n >\n  <h2>Edit Task</h2>\n  {currentTask && (\n    <form onSubmit={handleEditTask}>\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={currentTask.title}\n        onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n        required\n      />\n      <textarea\n        placeholder=\"Description\"\n        value={currentTask.description}\n        onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n        required\n      />\n      <button type=\"submit\">Save Changes</button>\n      <button type=\"button\" onClick={closeModal}>Cancel</button>\n    </form>\n  )}\n </Modal> */}\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"KanbanBoard\");\n$RefreshReg$(_c2, \"Column\");","map":{"version":3,"names":["React","useState","DndProvider","useDrop","HTML5Backend","Task","TaskForm","Modal","Button","TextField","jsxDEV","_jsxDEV","setAppElement","KanbanBoard","_s","tasks","setTasks","modalIsOpen","setModalIsOpen","currentTaskId","setCurrentTaskId","currentTask","setCurrentTask","addTask","newTask","prevTasks","openModal","task","id","closeModal","handleEditTask","e","preventDefault","updatedTasks","map","title","description","moveTask","status","backend","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","width","height","Column","filter","isOpen","onRequestClose","contentLabel","content","top","left","right","bottom","marginRight","transform","onSubmit","fullWidth","placeholder","value","onChange","target","required","type","variant","onClick","_c","deleteTask","_s2","drop","accept","item","ref","padding","backgroundColor","overflowY","onDelete","_c2","$RefreshReg$"],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard/KanbanBoard.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndProvider, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Task from '../Task/Task';\nimport TaskForm from '../TaskForm/TaskForm';\nimport Modal from 'react-modal';\nimport { Task as TaskType } from '../types';\nimport { Button, TextField } from '@mui/material';\n\nModal.setAppElement('#root'); // Set the app element for accessibility\n\nconst KanbanBoard: React.FC = () => {\n    const [tasks, setTasks] = useState<TaskType[]>([]);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n    const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n    const addTask = (newTask: TaskType) => {\n        setTasks((prevTasks) => [...prevTasks, newTask]);\n    };\n\n    const openModal = (task: TaskType) => {\n        setCurrentTask(task);\n        setCurrentTaskId(task.id);\n        setModalIsOpen(true);\n    };\n\n    const closeModal = () => {\n        setModalIsOpen(false);\n        setCurrentTaskId(null);\n        setCurrentTask(null);\n    };\n\n    const handleEditTask = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!currentTask) return;\n\n        const updatedTasks = tasks.map((task) =>\n            task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n        );\n        setTasks(updatedTasks);\n        closeModal();\n    };\n\n    const moveTask = (id: string, status: 'TODO' | 'DOING' | 'DONE') => {\n        setTasks((prevTasks) =>\n            prevTasks.map((task) => (task.id === id ? { ...task, status } : task))\n        );\n    };\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <TaskForm addTask={addTask} />\n            <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%', height: '100vh' }}>\n                {['TODO', 'DOING', 'DONE'].map((status) => (\n                    <Column \n                        key={status} \n                        status={status as 'TODO' | 'DOING' | 'DONE'} // Cast status to the correct type\n                        tasks={tasks.filter((task) => task.status === status)} \n                        moveTask={moveTask} \n                    />\n                ))}\n            </div>\n\n            <Modal\n                isOpen={modalIsOpen}\n                onRequestClose={closeModal}\n                contentLabel=\"Edit Task\"\n                style={{ content: { top: '50%', left: '50%', right: 'auto', bottom: 'auto', marginRight: '-50%', transform: 'translate(-50%, -50%)' } }}\n            >\n                <h2>Edit Card</h2>\n                {currentTask && (\n                    <form onSubmit={handleEditTask}>\n                        <TextField\n                            fullWidth\n                            placeholder=\"Edit Title\"\n                            value={currentTask.title}\n                            onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n                            required\n                        />\n                        <TextField\n                            fullWidth\n                            placeholder=\"Edit Description\"\n                            value={currentTask.description}\n                            onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n                            required\n                        />\n                        <div style={{ justifyContent: 'space-between', display: 'flex' }}>\n                            <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n                                Close\n                            </Button>\n                            <Button type=\"submit\" variant=\"contained\">\n                                Submit\n                            </Button>\n                        </div>\n                    </form>\n                )}\n            </Modal>\n        </DndProvider>\n    );\n};\n\n\n// interface ColumnProps {\n//     status: 'TODO' | 'DOING' | 'DONE'; // Specify the status as a literal type\n//     tasks: TaskType[];\n//     moveTask: (id: string, status: 'TODO' | 'DOING' | 'DONE') => void;\n// }\n\n// const Column: React.FC<ColumnProps> = ({ status, tasks, moveTask }) => {\n//     const [, drop] = useDrop({\n//         accept: 'TASK',\n//         drop: (item: { id: string }) => moveTask(item.id, status), // This now works because status is typed correctly\n//     });\n\n\n// Adjust the Column component to receive delete and openModal props\nconst Column: React.FC<{\n    status: 'TODO' | 'DOING' | 'DONE'; \n    tasks: TaskType[]; \n    moveTask: (id: string, status: 'TODO' | 'DOING' | 'DONE') => void; \n    deleteTask: (id: string) => void; // Function to delete task\n    openModal: (task: TaskType) => void; // Function to open modal\n}> = ({ status, tasks, moveTask, deleteTask, openModal }) => {\n    const [, drop] = useDrop({\n        accept: 'TASK',\n        drop: (item: { id: string }) => moveTask(item.id, status),\n    });\n\n    return (\n        <div ref={drop} style={{ width: '30%', padding: '10px', backgroundColor: 'lightgrey', height: '100%', overflowY: 'auto' }}>\n            <h2>{status}</h2>\n            {tasks.map((task) => (\n                <Task key={task.id} task={task} onClick={() => {}} onDelete={() => {}} />\n            ))}\n        </div>\n    );\n};\n\nexport default KanbanBoard;\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import Modal from 'react-modal';\n// import { Task as TaskType } from '../types';\n// import { Button, TextField } from '@mui/material';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n\n// const customStyles = {\n//     content: {\n//       top: \"50%\",\n//       left: \"50%\",\n//       right: \"auto\",\n//       bottom: \"auto\",\n//       marginRight: \"-50%\",\n//       transform: \"translate(-50%, -50%)\",\n//     },\n//   };\n\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const addTask = (newTask: TaskType) => {\n//     setTasks([...tasks, newTask]);\n//   };\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n    \n//     setTasks(updatedTasks);\n//   };\n\n//    // Function to delete a task by its ID\n//    const handleDeleteTask = (taskId: string) => {\n//     setTasks(tasks.filter(task => task.id !== taskId));\n//   };\n\n\n//   return (\n//     <div>\n//       {/* <h1>Kanban TODO App</h1> */}\n//       <TaskForm addTask={addTask} />\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between', width: '95%', height:\"100%\"}}>\n//           {['TODO', 'DOING', 'DONE'].map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     height: \"100%\",\n//                     background : 'beige',\n//                     // border: '1px solid black',\n//                     // backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n//                   {tasks\n//                     .filter(task => task.status === status)\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)}  onDelete={() => handleDeleteTask(task.id)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//       <Modal\n//        isOpen={modalIsOpen}\n//        onRequestClose={closeModal}\n//        contentLabel=\"Edit Task\"\n//         style={customStyles}\n//       >\n//         <h2>Edit Card</h2>\n//         {currentTask && (\n//         <div>\n//           <form onSubmit={handleEditTask}>\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               placeholder=\"Edit Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <TextField\n//               fullWidth\n//               id=\"fullWidth\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//               placeholder=\"Edit Description\"\n//               sx={{ marginBottom: \"10px\" }}\n//             />\n//             <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\n//               <Button type=\"button\" variant=\"contained\" onClick={closeModal}>\n//                 Close\n//               </Button>\n//               <Button type=\"submit\" variant=\"contained\">\n//                 Submit\n//               </Button>\n//             </div>\n//           </form>\n//         </div>\n//          )}\n//       </Modal> \n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n\n\n\n\n\n\n\n\n      {/* Modal for editing tasks */}\n      {/* <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Edit Task\"\n        style={{\n          content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)',\n          },\n        }}\n      >\n        <h2>Edit Task</h2>\n        {currentTask && (\n          <form onSubmit={handleEditTask}>\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              value={currentTask.title}\n              onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n              required\n            />\n            <textarea\n              placeholder=\"Description\"\n              value={currentTask.description}\n              onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n              required\n            />\n            <button type=\"submit\">Save Changes</button>\n            <button type=\"button\" onClick={closeModal}>Cancel</button>\n          </form>\n        )}\n      </Modal> */}\n\n\n// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from '../Task/Task';\n// import TaskForm from '../TaskForm/TaskForm';\n// import Modal from 'react-modal';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n//   const [currentTask, setCurrentTask] = useState<TaskType | null>(null);\n\n//   const openModal = (task: TaskType) => {\n//     setCurrentTask(task);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//     setCurrentTask(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTask) return;\n\n//     const updatedTasks = tasks.map(task =>\n//       task.id === currentTaskId ? { ...task, title: currentTask.title, description: currentTask.description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return; // If the task is dropped outside\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1); // Remove the task from its original position\n\n//     // Update the status of the moved task based on the droppableId\n//     movedTask.status = result.destination.droppableId as 'TODO' | 'DOING' | 'DONE'; // Ensure the type is correct\n\n//     // Insert the moved task into its new position\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     // Update state with the new tasks array\n//     setTasks(updatedTasks);\n//   };\n\n//   const addTask = (task: TaskType) => {\n//     setTasks([...tasks, task]); // Add the task directly\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {(['TODO', 'DOING', 'DONE'] as const).map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n\n//                   {/* TaskForm inside the column */}\n//                   <TaskForm addTask={addTask} status={status} />\n\n//                   {tasks\n//                     .filter(task => task.status === status) // Filter tasks based on status\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         {currentTask && (\n//           <form onSubmit={handleEditTask}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Title\"\n//               value={currentTask.title}\n//               onChange={(e) => setCurrentTask({ ...currentTask, title: e.target.value })}\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Description\"\n//               value={currentTask.description}\n//               onChange={(e) => setCurrentTask({ ...currentTask, description: e.target.value })}\n//               required\n//             />\n//             <button type=\"submit\">Save Changes</button>\n//             <button type=\"button\" onClick={closeModal}>Cancel</button>\n//           </form>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n"],"mappings":"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AA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC8B,GAAA,CApBIxB,MAMJ;EAAA,QACmB/C,OAAO;AAAA;AAAAgF,GAAA,GAPtBjC,MAMJ;AAgBF,eAAerC,WAAW;;AAqB1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASM,CAAC;AACD,CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAlCO;;AAqignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}