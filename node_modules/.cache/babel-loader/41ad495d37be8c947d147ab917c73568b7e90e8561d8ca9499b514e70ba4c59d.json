{"ast":null,"code":"// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from './Task';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import Modal from 'react-modal';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n\n//   const addTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!title || !description) return;\n//     const newTask: TaskType = {\n//       id: Date.now().toString(),\n//       title,\n//       description,\n//       status: 'TODO',\n//     };\n//     setTasks([...tasks, newTask]);\n//     setTitle('');\n//     setDescription('');\n//   };\n\n//   const openModal = (task: TaskType) => {\n//     setTitle(task.title);\n//     setDescription(task.description);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTaskId) return;\n\n//     const updatedTasks = tasks.map(task => \n//       task.id === currentTaskId ? { ...task, title, description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n//     // Set the new status based on the destination droppableId\n//     movedTask.status = result.destination.droppableId;\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     setTasks(updatedTasks);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n//       <form onSubmit={addTask}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//         />\n//         <button type=\"submit\">Add Task</button>\n//       </form>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {['TODO', 'DOING', 'DONE'].map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n//                   {tasks\n//                     .filter(task => task.status === status)\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         <form onSubmit={handleEditTask}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Title\"\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             required\n//           />\n//           <textarea\n//             placeholder=\"Description\"\n//             value={description}\n//             onChange={(e) => setDescription(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">Save Changes</button>\n//           <button type=\"button\" onClick={closeModal}>Cancel</button>\n//         </form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;","map":{"version":3,"names":[],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/KanbanBoard.tsx"],"sourcesContent":["// // src/components/KanbanBoard.tsx\n\n// import React, { useState } from 'react';\n// import Task from './Task';\n// import { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// import Modal from 'react-modal';\n// import { Task as TaskType } from '../types';\n\n// Modal.setAppElement('#root'); // Set the app element for accessibility\n\n// const KanbanBoard: React.FC = () => {\n//   const [tasks, setTasks] = useState<TaskType[]>([]);\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n\n//   const addTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!title || !description) return;\n//     const newTask: TaskType = {\n//       id: Date.now().toString(),\n//       title,\n//       description,\n//       status: 'TODO',\n//     };\n//     setTasks([...tasks, newTask]);\n//     setTitle('');\n//     setDescription('');\n//   };\n\n//   const openModal = (task: TaskType) => {\n//     setTitle(task.title);\n//     setDescription(task.description);\n//     setCurrentTaskId(task.id);\n//     setModalIsOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalIsOpen(false);\n//     setCurrentTaskId(null);\n//   };\n\n//   const handleEditTask = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentTaskId) return;\n\n//     const updatedTasks = tasks.map(task => \n//       task.id === currentTaskId ? { ...task, title, description } : task\n//     );\n//     setTasks(updatedTasks);\n//     closeModal();\n//   };\n\n//   const onDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const updatedTasks = Array.from(tasks);\n//     const [movedTask] = updatedTasks.splice(result.source.index, 1);\n\n//     // Set the new status based on the destination droppableId\n//     movedTask.status = result.destination.droppableId;\n//     updatedTasks.splice(result.destination.index, 0, movedTask);\n\n//     setTasks(updatedTasks);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Kanban TODO App</h1>\n//       <form onSubmit={addTask}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//         />\n//         <button type=\"submit\">Add Task</button>\n//       </form>\n\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           {['TODO', 'DOING', 'DONE'].map((status) => (\n//             <Droppable key={status} droppableId={status}>\n//               {(provided) => (\n//                 <div\n//                   ref={provided.innerRef}\n//                   {...provided.droppableProps}\n//                   style={{\n//                     width: '30%',\n//                     padding: '10px',\n//                     border: '1px solid black',\n//                     backgroundColor: status === 'TODO' ? 'lightyellow' : status === 'DOING' ? 'lightblue' : 'lightgreen',\n//                   }}\n//                 >\n//                   <h2>{status}</h2>\n//                   {tasks\n//                     .filter(task => task.status === status)\n//                     .map((task, index) => (\n//                       <Task key={task.id} task={task} index={index} onClick={() => openModal(task)} />\n//                     ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n\n//       {/* Modal for editing tasks */}\n//       <Modal\n//         isOpen={modalIsOpen}\n//         onRequestClose={closeModal}\n//         contentLabel=\"Edit Task\"\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             transform: 'translate(-50%, -50%)',\n//           },\n//         }}\n//       >\n//         <h2>Edit Task</h2>\n//         <form onSubmit={handleEditTask}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Title\"\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             required\n//           />\n//           <textarea\n//             placeholder=\"Description\"\n//             value={description}\n//             onChange={(e) => setDescription(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">Save Changes</button>\n//           <button type=\"button\" onClick={closeModal}>Cancel</button>\n//         </form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}