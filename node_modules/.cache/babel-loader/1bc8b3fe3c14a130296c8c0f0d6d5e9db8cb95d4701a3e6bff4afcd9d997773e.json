{"ast":null,"code":"var _jsxFileName = \"/Users/pratapsingh/Documents/assign/kanban-todo/src/components/TaskForm/TaskForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  addTask\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newTask = {\n      id: Math.random().toString(36).substr(2, 9),\n      // Generate a random id\n      title,\n      description,\n      status: 'TODO' // Default status when creating a new task\n    };\n    addTask(newTask);\n    setTitle('');\n    setDescription('');\n  };\n  return (\n    /*#__PURE__*/\n    // <form onSubmit={handleSubmit} style={{gap:\"20px\"}}>\n    _jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: handleSubmit,\n      sx: {\n        display: 'flex',\n        gap: '20px',\n        alignItems: 'flex-start',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        sx: {\n          width: \"30%\"\n        },\n        id: \"fullWidth\",\n        type: \"text\",\n        placeholder: \"Task Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        sx: {\n          width: \"30%\"\n        },\n        placeholder: \"Task Description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(TaskForm, \"1UKQWTfo2RWmkwPNsekAdQbvqFk=\");\n_c = TaskForm;\nexport default TaskForm;\n\n// // src/components/TaskForm.tsx\n\n// import React, { useState } from 'react';\n// import { Task as TaskType } from '../types';\n\n// interface TaskFormProps {\n//   addTask: (task: TaskType) => void; // Update to accept a Task object\n//   status: 'TODO' | 'DOING' | 'DONE'; // Accept the status as a prop\n// }\n\n// const TaskForm: React.FC<TaskFormProps> = ({ addTask, status }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     const newTask: TaskType = {\n//       id: Math.random().toString(36).substr(2, 9), // Generate a random id\n//       title,\n//       description,\n//       status,\n//     };\n//     addTask(newTask); // Pass the entire task object\n//     setTitle('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Task Title\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         required\n//       />\n//       <textarea\n//         placeholder=\"Task Description\"\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         required\n//       />\n//       <button type=\"submit\">Add Task</button>\n//     </form>\n//   );\n// };\n\n// export default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","Box","Button","TextField","jsxDEV","_jsxDEV","TaskForm","addTask","_s","title","setTitle","description","setDescription","handleSubmit","e","preventDefault","newTask","id","Math","random","toString","substr","status","component","onSubmit","sx","display","gap","alignItems","marginBottom","children","width","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","variant","_c","$RefreshReg$"],"sources":["/Users/pratapsingh/Documents/assign/kanban-todo/src/components/TaskForm/TaskForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Task as TaskType } from '../types';\nimport { Box, Button, TextField } from '@mui/material';\n\ninterface TaskFormProps {\n  addTask: (task: TaskType) => void;\n}\n\nconst TaskForm: React.FC<TaskFormProps> = ({ addTask }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const newTask: TaskType = {\n      id: Math.random().toString(36).substr(2, 9), // Generate a random id\n      title,\n      description,\n      status: 'TODO', // Default status when creating a new task\n    };\n    addTask(newTask);\n    setTitle('');\n    setDescription('');\n  };\n\n  return (\n    // <form onSubmit={handleSubmit} style={{gap:\"20px\"}}>\n\n    <Box    component=\"form\"\n    onSubmit={handleSubmit}\n    sx={{\n      display: 'flex',\n      gap: '20px', \n      alignItems: 'flex-start',\n      marginBottom : '20px'\n    }}>\n      <TextField\n      sx={{width:\"30%\"}}\n        id=\"fullWidth\"\n        type=\"text\"\n        placeholder=\"Task Title\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        required\n      />\n      <TextField\n      sx={{width:\"30%\"}}\n        placeholder=\"Task Description\"\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n        required\n      />\n      <Button variant=\"contained\" type=\"submit\">Add Task</Button>\n    </Box>\n  );\n};\n\nexport default TaskForm;\n\n\n\n\n\n\n\n\n\n// // src/components/TaskForm.tsx\n\n// import React, { useState } from 'react';\n// import { Task as TaskType } from '../types';\n\n// interface TaskFormProps {\n//   addTask: (task: TaskType) => void; // Update to accept a Task object\n//   status: 'TODO' | 'DOING' | 'DONE'; // Accept the status as a prop\n// }\n\n// const TaskForm: React.FC<TaskFormProps> = ({ addTask, status }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     const newTask: TaskType = {\n//       id: Math.random().toString(36).substr(2, 9), // Generate a random id\n//       title,\n//       description,\n//       status,\n//     };\n//     addTask(newTask); // Pass the entire task object\n//     setTitle('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Task Title\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         required\n//       />\n//       <textarea\n//         placeholder=\"Task Description\"\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         required\n//       />\n//       <button type=\"submit\">Add Task</button>\n//     </form>\n//   );\n// };\n\n// export default TaskForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,GAAG,EAAEC,MAAM,EAAEC,SAAS,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMvD,MAAMC,QAAiC,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMa,YAAY,GAAIC,CAAkB,IAAK;IAC3CA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,OAAiB,GAAG;MACxBC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAAE;MAC7CZ,KAAK;MACLE,WAAW;MACXW,MAAM,EAAE,MAAM,CAAE;IAClB,CAAC;IACDf,OAAO,CAACS,OAAO,CAAC;IAChBN,QAAQ,CAAC,EAAE,CAAC;IACZE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED;IAAA;IACE;IAEAP,OAAA,CAACJ,GAAG;MAAIsB,SAAS,EAAC,MAAM;MACxBC,QAAQ,EAAEX,YAAa;MACvBY,EAAE,EAAE;QACFC,OAAO,EAAE,MAAM;QACfC,GAAG,EAAE,MAAM;QACXC,UAAU,EAAE,YAAY;QACxBC,YAAY,EAAG;MACjB,CAAE;MAAAC,QAAA,gBACAzB,OAAA,CAACF,SAAS;QACVsB,EAAE,EAAE;UAACM,KAAK,EAAC;QAAK,CAAE;QAChBd,EAAE,EAAC,WAAW;QACde,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,YAAY;QACxBC,KAAK,EAAEzB,KAAM;QACb0B,QAAQ,EAAGrB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE;QAC1CG,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFpC,OAAA,CAACF,SAAS;QACVsB,EAAE,EAAE;UAACM,KAAK,EAAC;QAAK,CAAE;QAChBE,WAAW,EAAC,kBAAkB;QAC9BC,KAAK,EAAEvB,WAAY;QACnBwB,QAAQ,EAAGrB,CAAC,IAAKF,cAAc,CAACE,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE;QAChDG,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFpC,OAAA,CAACH,MAAM;QAACwC,OAAO,EAAC,WAAW;QAACV,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAQ;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD;EAAC;AAEV,CAAC;AAACjC,EAAA,CA/CIF,QAAiC;AAAAqC,EAAA,GAAjCrC,QAAiC;AAiDvC,eAAeA,QAAQ;;AAUvB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}